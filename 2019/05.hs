{-# LANGUAGE RecordWildCards #-}

import           Control.Monad
import           Data.Vector (Vector)
import qualified Data.Vector as V

data IntCode = IntCode {
  input :: [Int],
  output :: [Int],
  memory :: Vector Int,
  pc :: Int
  }
  deriving Show

data Param = Imm Int | Pos Int
  deriving Show

data Op = Halt | Add | Mul | In | Out | JNZ | JZ | TestLT | TestEQ

decodeInstruction :: Vector Int -> Int -> (Op, [Param])
decodeInstruction mem pc = case (mem V.! pc) `mod` 100 of
  99 -> (Halt, [])
  1 -> (Add, arity 3)
  2 -> (Mul, arity 3)
  3 -> (In, arity 1)
  4 -> (Out, arity 1)
  5 -> (JNZ, arity 2)
  6 -> (JZ, arity 2)
  7 -> (TestLT, arity 3)
  8 -> (TestEQ, arity 3)
  where
    modes = [case c of {'0' -> Pos; '1' -> Imm} | c <- reverse $ show ((mem V.! pc) `div` 100)] ++ repeat Pos
    arity n = zipWith id modes [mem V.! (pc + i) | i <- [1..n]]

step :: IntCode -> Maybe IntCode
step m@IntCode{..} = case decodeInstruction memory pc of
  (Halt, []) -> Nothing
  (Add, [a, b, Pos c]) -> Just m{pc = pc + 4,
                                 memory = store (ind a + ind b) c}
  (Mul, [a, b, Pos c]) -> Just m{pc = pc + 4,
                                 memory = store (ind a * ind b) c}
  (In, [Pos i]) -> Just m{input = tail input,
                          pc = pc + 2,
                          memory = store (head input) i}
  (Out, [o]) -> Just m{output = output ++ [ind o],
                       pc = pc + 2}
  (JNZ, [b, t])
    | ind b /= 0 -> Just m{pc = ind t}
    | otherwise -> Just m{pc = pc + 3}
  (JZ, [b, t])
    | ind b == 0 -> Just m{pc = ind t}
    | otherwise -> Just m{pc = pc + 3}
  (TestLT, [a, b, Pos t]) -> Just m{pc = pc + 4,
                                    memory = store (if ind a < ind b then 1 else 0) t}
  (TestEQ, [a, b, Pos t]) -> Just m{pc = pc + 4,
                                    memory = store (if ind a == ind b then 1 else 0) t}
  where
    ind (Imm x) = x
    ind (Pos x) = memory V.! x
    store x i = memory V.// [(i, x)]

run' :: IntCode -> [IntCode]
run' st = case step st of
            Just a -> st : run' a
            Nothing -> [st]

run :: IntCode -> IntCode
run st = last (run' st)

prog :: Vector Int
prog = V.fromList [3,225,1,225,6,6,1100,1,238,225,104,0,101,71,150,224,101,-123,224,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,2,205,209,224,1001,224,-3403,224,4,224,1002,223,8,223,101,1,224,224,1,223,224,223,1101,55,24,224,1001,224,-79,224,4,224,1002,223,8,223,101,1,224,224,1,223,224,223,1,153,218,224,1001,224,-109,224,4,224,1002,223,8,223,101,5,224,224,1,224,223,223,1002,201,72,224,1001,224,-2088,224,4,224,102,8,223,223,101,3,224,224,1,223,224,223,1102,70,29,225,102,5,214,224,101,-250,224,224,4,224,1002,223,8,223,1001,224,3,224,1,223,224,223,1101,12,52,225,1101,60,71,225,1001,123,41,224,1001,224,-111,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1102,78,66,224,1001,224,-5148,224,4,224,1002,223,8,223,1001,224,2,224,1,223,224,223,1101,29,77,225,1102,41,67,225,1102,83,32,225,1101,93,50,225,1102,53,49,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1107,677,677,224,1002,223,2,223,1005,224,329,101,1,223,223,7,677,677,224,1002,223,2,223,1005,224,344,1001,223,1,223,7,226,677,224,102,2,223,223,1006,224,359,101,1,223,223,1108,226,226,224,1002,223,2,223,1005,224,374,1001,223,1,223,8,226,677,224,1002,223,2,223,1006,224,389,1001,223,1,223,1108,226,677,224,1002,223,2,223,1006,224,404,101,1,223,223,1107,677,226,224,102,2,223,223,1006,224,419,101,1,223,223,1007,677,677,224,1002,223,2,223,1005,224,434,101,1,223,223,7,677,226,224,102,2,223,223,1006,224,449,1001,223,1,223,1008,226,677,224,1002,223,2,223,1006,224,464,101,1,223,223,8,677,677,224,1002,223,2,223,1006,224,479,101,1,223,223,108,226,226,224,102,2,223,223,1005,224,494,101,1,223,223,1107,226,677,224,1002,223,2,223,1006,224,509,101,1,223,223,107,226,226,224,1002,223,2,223,1006,224,524,1001,223,1,223,107,677,677,224,1002,223,2,223,1005,224,539,101,1,223,223,1007,226,226,224,102,2,223,223,1006,224,554,101,1,223,223,108,677,677,224,102,2,223,223,1005,224,569,101,1,223,223,107,677,226,224,102,2,223,223,1005,224,584,101,1,223,223,1008,226,226,224,102,2,223,223,1006,224,599,101,1,223,223,1108,677,226,224,1002,223,2,223,1006,224,614,101,1,223,223,8,677,226,224,102,2,223,223,1005,224,629,1001,223,1,223,1008,677,677,224,102,2,223,223,1006,224,644,101,1,223,223,1007,226,677,224,102,2,223,223,1005,224,659,101,1,223,223,108,226,677,224,102,2,223,223,1006,224,674,101,1,223,223,4,223,99,226]

solve1 :: IntCode
solve1 = run (IntCode { input = [1], output = [], memory = prog, pc = 0})

solve2 :: IntCode
solve2 = run (IntCode { input = [5], output = [], memory = prog, pc = 0})
